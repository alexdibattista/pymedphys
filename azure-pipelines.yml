jobs:
  - job: 'Tox'

    strategy:
      matrix:
        pylint:
          image_name: 'ubuntu-16.04'
          test_title: 'Pylint'
          toxenv: pylint
          python: 3.7
        docs:
          image_name: 'ubuntu-16.04'
          test_title: 'Docs'
          toxenv: docs
          python: 3.7
        layer-lint:
          image_name: 'ubuntu-16.04'
          test_title: 'Layer-Lint'
          toxenv: layer_lint
          python: 3.7
        mypy:
          image_name: 'ubuntu-16.04'
          test_title: 'mypy'
          toxenv: mypy
          python: 3.7
        linux-py36:
          image_name: 'ubuntu-16.04'
          test_title: 'Linux py36'
          toxenv: py36
          python: 3.6
        linux-py37:
          image_name: 'ubuntu-16.04'
          test_title: 'Linux py37'
          toxenv: py37
          python: 3.7
        mac-py36:
          image_name: 'macos-10.13'
          test_title: 'macOS py36'
          toxenv: py36
          python: 3.6
        mac-py37:
          image_name: 'macos-10.13'
          test_title: 'macOS py37'
          toxenv: py37
          python: 3.7
        windows-py36:
          image_name: 'vs2017-win2016'
          test_title: 'Windows'
          toxenv: py36
          python: 3.6
        windows-py37:
          image_name: 'vs2017-win2016'
          test_title: 'Windows'
          toxenv: py37
          python: 3.7

    pool:
      vmImage: $(image_name)

    steps:
    - task: UsePythonVersion@0
      displayName: setup python
      inputs:
        versionSpec: $(python)

    - script: "python -c \"import sys; print(sys.version); print(sys.executable)\""
      displayName: Show python information

    - script: "python -m pip install pip setuptools"
      displayName: Upgrade pip and setuptools

    - script: "python -m pip install tox"
      displayName: Install tox

    - script: python -m tox -e $TOXENV --notest
      displayName: Install test dependencies

    - script: python -m tox -e $TOXENV
      displayName: Run tests

    - task: PublishTestResults@2
      displayName: Publish Test Results
      inputs:
        testResultsFiles: junit/*.xml
        testRunTitle: '$(test_title)'
      condition: succeededOrFailed()


  - job: NotebookOutputs

    pool:
      vmImage: 'ubuntu-16.04'

    steps:
    - script: "python -m pip install nbstripout"
      displayName: Install nbstripout

    - bash:  find . -iname \*.ipynb | xargs -d "\n" nbstripout && git add -A && git diff HEAD --name-only --exit-code -- "*ipynb"
      displayName: Check that notebooks have no included output
